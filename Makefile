
LOCAL_BIN:=$(CURDIR)/bin
BUILD_TARGET_DIR=$(CURDIR)/build

PATH:=$(PATH):$(LOCAL_BIN)
GOPROXY:=https://goproxy.io,direct

VERSION=$(shell git describe --tags --always 2>/dev/null || echo "0.0.0")

default: help

.PHONY: help
help: # Show help in Makefile
	@grep -E '^[a-zA-Z0-9 _-]+:.*#'  Makefile | sort | while read -r l; do printf "\033[1;32m$$(echo $$l | cut -f 1 -d':')\033[00m:$$(echo $$l | cut -f 2- -d'#')\n"; done

# List of required binaries (default checks PATH)
# Optional: Specify custom paths for binaries not in PATH
# Format: binary_name=/path/to/binary
REQUIRED_BINS = git node npm go protoc \
				protoc-gen-ts=$(LOCAL_BIN)/node_bin/bin/protoc-gen-ts \
				protoc-gen-go=$(LOCAL_BIN)/protoc-gen-go \
				protoc-gen-go-grpc=$(LOCAL_BIN)/protoc-gen-go-grpc \
				protoc-gen-validate=$(LOCAL_BIN)/protoc-gen-validate \
				protoc-gen-jsonschema=$(LOCAL_BIN)/protoc-gen-jsonschema \
				protoc-gen-doc=$(LOCAL_BIN)/protoc-gen-doc
.PHONY: .check-bins
.check-bins: # Check for required binaries if build locally
	@echo "Checking for required binaries..."
	@missing=0; \
	for bin_spec in $(REQUIRED_BINS); do \
		bin=$${bin_spec%%=*}; \
		custom_path=$${bin_spec#*=}; \
		if [ "$$bin" != "$$custom_path" ]; then \
			# Check custom path first \
			if [ -x "$$custom_path" ]; then \
				echo "✓ $$bin is installed at $$custom_path"; \
				continue; \
			fi; \
		fi; \
		# Fall back to PATH check \
		if which $$bin > /dev/null; then \
			echo "✓ $$bin is installed in PATH"; \
		else \
			echo "✗ $$bin is NOT found"; \
			missing=1; \
		fi; \
	done; \
	if [ $$missing -eq 1 ]; then \
		echo "Error: Some required binaries are missing"; \
		exit 1; \
	else \
		echo "All required binaries are available"; \
	fi

.PHONY: .go-deps
.go-deps:
	mkdir -p $(LOCAL_BIN)
	GOBIN=$(LOCAL_BIN) GOPROXY=direct go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
	GOBIN=$(LOCAL_BIN) GOPROXY=direct go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
	GOBIN=$(LOCAL_BIN) GOPROXY=direct go install github.com/envoyproxy/protoc-gen-validate@latest

.PHONY: .node-deps
.node-deps:
	mkdir -p $(LOCAL_BIN)
	npm install --global --prefix $(LOCAL_BIN)/node_bin @protobuf-ts/plugin

.PHONY: .doc-deps
.doc-deps:
	GOBIN=$(LOCAL_BIN) GOPROXY=direct go install github.com/pseudomuto/protoc-gen-doc/cmd/protoc-gen-doc@latest
	GOBIN=$(LOCAL_BIN) GOPROXY=direct go install github.com/pubg/protoc-gen-jsonschema@latest

.PHONY: bin-deps
bin-deps: .go-deps .node-deps .doc-deps # Install binary dependencies in ./bin

PROTO_PATH=./proto
PROTO_PATH_FULL=$(CURDIR)/proto
PROTO_FILES=$(shell find "./proto" -type f -name '*.proto')
PROTO_FILES_NO_GEN=$(shell find "./proto" -path "./proto/gen" -prune -o -type f -name '*.proto' -print)

TS_TARGET_DIR=$(BUILD_TARGET_DIR)/ts
TS_PLUGIN_DIR=$(LOCAL_BIN)/node_bin/bin/protoc-gen-ts
TS_BUNDLE_DIR=$(CURDIR)/tools/ts_bundle
TMP_BUNDLE_DIR=$(TS_BUNDLE_DIR)/tmp
.PHONY: .build-ts-sdk
.build-ts-sdk: # Build ts sdk with single js file for proto files
	mkdir -p $(TS_TARGET_DIR)
	mkdir -p $(TMP_BUNDLE_DIR)
	mkdir -p $(TMP_BUNDLE_DIR)/ts_sdk
	protoc --plugin=$(TS_PLUGIN_DIR) --ts_out=$(TMP_BUNDLE_DIR)/ts_sdk \
	--ts_opt=force_disable_services \
 	--ts_opt=force_client_none \
 	--ts_opt=force_exclude_all_options \
 	--ts_opt=keep_enum_prefix \
 	--ts_opt=add_pb_suffix \
 	--ts_opt=long_type_string \
 	--proto_path=$(PROTO_PATH) $(PROTO_FILES)
	cp $(TS_BUNDLE_DIR)/combine.js $(TMP_BUNDLE_DIR)/
	cp $(TS_BUNDLE_DIR)/package.json $(TMP_BUNDLE_DIR)/
	cp $(TS_BUNDLE_DIR)/tsconfig.json $(TMP_BUNDLE_DIR)/
	cp $(TS_BUNDLE_DIR)/webpack.config.js $(TMP_BUNDLE_DIR)/
	cp $(TS_BUNDLE_DIR)/stroppy-sdk.ts $(TMP_BUNDLE_DIR)/
	cd $(TMP_BUNDLE_DIR) && npm install && node combine.js && npm run build
	cat $(TMP_BUNDLE_DIR)/stroppy-sdk.ts >> $(TMP_BUNDLE_DIR)/stroppy.pb.ts
	cp $(TMP_BUNDLE_DIR)/stroppy.pb.ts $(TS_TARGET_DIR)/stroppy.pb.ts
	cp $(TMP_BUNDLE_DIR)/dist/bundle.js $(TS_TARGET_DIR)/stroppy.pb.js
	rm -rf $(TMP_BUNDLE_DIR)

GO_TARGET_DIR=$(BUILD_TARGET_DIR)/go
.PHONY: .build-go-sdk
.build-go-sdk: # Build go sdk
	mkdir -p $(GO_TARGET_DIR)
	protoc \
		--plugin=$(LOCAL_BIN)/protoc-gen-go \
		--go_out=$(GO_TARGET_DIR) \
    	--go_opt=paths=source_relative \
    	--plugin=$(LOCAL_BIN)/protoc-gen-go-grpc \
    	--go-grpc_out=$(GO_TARGET_DIR) \
    	--go-grpc_opt=paths=source_relative \
    	--plugin=$(LOCAL_BIN)/protoc-gen-validate \
    	--validate_out="lang=go,paths=source_relative:$(GO_TARGET_DIR)" \
    	--proto_path=$(PROTO_PATH) $(PROTO_FILES)
	printf '// Code generated by stoppy. DO NOT EDIT.\npackage proto\n\nconst Version = "%s"\n' "$(VERSION)" > $(GO_TARGET_DIR)/version.stroppy.pb.go

.PHONY: .build-md-docs
.build-md-docs: # Build proto docs
	mkdir -p $(DOCS_TARGET_DIR)
	protoc --plugin=$(LOCAL_BIN)/protoc-gen-doc \
	--doc_out=$(DOCS_TARGET_DIR) \
	--doc_opt=markdown,proto.md \
	--proto_path=$(PROTO_PATH) $(PROTO_FILES_NO_GEN)

DOCS_TARGET_DIR=$(BUILD_TARGET_DIR)/docs
.PHONY: .build-json-schema
.build-json-schema: # Build json schema for proto files
	mkdir -p $(DOCS_TARGET_DIR)
	protoc --plugin=$(LOCAL_BIN)/protoc-gen-jsonschema \
	--jsonschema_out=$(DOCS_TARGET_DIR) \
	--jsonschema_opt=entrypoint_message=Config \
  	--jsonschema_opt=output_file_suffix=.shema.yaml \
  	--jsonschema_opt=preserve_proto_field_names=true \
	--jsonschema_opt=int64_as_string=true \
	--proto_path=$(PROTO_PATH_FULL) $(CURDIR)/proto/config.proto

.PHONY: build
build: .check-bins .build-go-sdk .build-ts-sdk .build-md-docs .build-json-schema # Build go sdk, ts code, docs and json schema

branch=main
.PHONY: revision
revision: # Recreate git tag with version tag=<semver>
	@if [ -e $(tag) ]; then \
		echo "error: Specify version 'tag='"; \
		exit 1; \
	fi
	git tag -d ${tag} || true
	git push --delete origin ${tag} || true
	git tag $(tag)
	git push origin $(tag)