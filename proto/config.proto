syntax = "proto3";

package stroppy;

import "common.proto";
import "descriptor.proto";
import "gen/validate/validate.proto";
import "google/protobuf/duration.proto";

option go_package = "github.com/stroppy-io/stroppy-core/pkg/proto";

/**
 * OtlpExport contains configuration for exporting metrics via OpenTelemetry Protocol (OTLP).
 * It specifies the endpoint and metrics prefix for telemetry data export.
 */
message OtlpExport {
    /** gRPC endpoint for OpenTelemetry collector */
    optional string otlp_grpc_endpoint = 1;
    /** Prefix to be added to all exported metrics */
    optional string otlp_metrics_prefix = 2;
}

/**
 * GoExecutor contains configuration specific to Go-based test execution.
 * It controls Go runtime parameters and error handling behavior.
 */
message GoExecutor {
    /** Maximum number of OS threads that the Go runtime can use (0 = use default) */
    optional uint64 go_max_proc = 1;
    /** Whether to cancel execution on first error */
    optional bool cancel_on_error = 2;
}

/**
 * K6Executor contains configuration for k6 load testing tool integration.
 * It contains paths to the k6 binary and the k6 test script, as well as
 * additional arguments to pass to the k6 binary.
 */
message K6Executor {
    /** Path to the k6 binary */
    string k6_binary_path = 1 [(validate.rules).string.uri_ref = true];
    /** Additional arguments to pass to the k6 binary */
    repeated string k6_binary_args = 2 [
        (validate.rules).repeated = {
            unique: true,
        }
    ];
    /** Path to the k6 test script */
    string k6_script_path = 3 [(validate.rules).string.uri_ref = true];

    /** Timeout for k6 setup phase */
    optional google.protobuf.Duration k6_setup_timeout = 10;
    /** Number of virtual users */
    optional uint64 k6_vus = 12 [(validate.rules).uint64 = {ignore_empty: true, gte: 0}];
    /** Maximum number of virtual users */
    optional uint64 k6_max_vus = 13 [(validate.rules).uint64 = {ignore_empty: true, gte: 0}];
    /** Number of requests per second */
    optional uint64 k6_rate = 14 [(validate.rules).uint64 = {ignore_empty: true, gte: 0}];
    /** Duration of the test */
    optional google.protobuf.Duration k6_duration = 15;
    /** OpenTelemetry export configuration */
    optional OtlpExport otlp_export = 100;
}

/**
 * DriverConfig contains configuration for connecting to a database driver.
 * It includes the driver plugin path, connection URL, and database-specific settings.
*/
message DriverConfig {
    /** Path to the driver plugin binary */
    string driver_plugin_path = 1 [(validate.rules).string.uri_ref = true];
    /** Additional arguments for the driver plugin */
    repeated string driver_plugin_args = 2 [
        (validate.rules).repeated = {
            unique: true,
        }
    ];
    /** Database connection URL */
    string url = 3 [(validate.rules).string.uri_ref = true];
    /** Database-specific configuration options */
    optional Value.Struct db_specific = 4;
}

/**
 * RequestedStep defines a step that should be executed during the benchmark.
 * It specifies the step name and the type of executor to use.
 */
message RequestedStep {
    enum ExecutorType {
        EXECUTOR_TYPE_GO = 0;
        EXECUTOR_TYPE_K6 = 1;
    }
    /** Unique name of the step */
    string name = 1 [(validate.rules).string.min_len = 1];
    /** Type of executor to use for this step */
    optional ExecutorType executor = 2 [(validate.rules).enum.defined_only = true];
}

/**
 * LoggerConfig contains configuration for the logging system.
 * It controls log levels and output formatting.
 */
message LoggerConfig {
    enum LogLevel {
        LOG_LEVEL_DEBUG = 0;
        LOG_LEVEL_INFO = 1;
        LOG_LEVEL_WARN = 2;
        LOG_LEVEL_ERROR = 3;
        LOG_LEVEL_FATAL = 4;
    }
    enum LogMode {
        LOG_MODE_DEVELOPMENT = 0;
        LOG_MODE_PRODUCTION = 1;
    }
    /** Minimum log level to output */
    LogLevel log_level = 1 [(validate.rules).enum.defined_only = true];
    /** Logging mode (development or production) */
    LogMode log_mode = 2 [(validate.rules).enum.defined_only = true];
}

/**
 * StepContext provides contextual information to a benchmark step during execution.
 * It contains the current configuration and descriptors relevant to the step.
 */
message StepContext {
    /** Current step descriptor */
    StepDescriptor step = 5;
    /** Global configuration of the benchmark and its steps */
    Config global_config = 6;
}

/**
 * Plugins contains configuration for plugins.
 */
message Plugin {
    enum Type {
        TYPE_UNSPECIFIED = 0;
        TYPE_SIDECAR = 1;
    }
    /** Type of the plugin */
    Type type = 1 [(validate.rules).enum.defined_only = true];
    /** Path to the plugin binary */
    string path = 2 [(validate.rules).string.uri_ref = true];
    /** Additional plugin settings */
    optional Value.Struct settings = 3;
}

/**
 * RunConfig contains the complete configuration for a benchmark run.
 */
message RunConfig {
    /** Run identifier for reproducible test runs or debugging */
    string run_id = 1;
    /** Random seed for reproducible test runs */
    uint64 seed = 2 [(validate.rules).uint64.gte = 0];
    /** Database driver configuration */
    DriverConfig driver = 3 [(validate.rules).message.required = true];
    /** Go executor configuration */
    GoExecutor go_executor = 4;
    /** k6 executor configuration */
    K6Executor k6_executor = 5;
    /** List of steps to execute in order */
    repeated RequestedStep steps = 6 [
        (validate.rules).repeated = {
            min_items: 1,
            items: {message: {required: true}}
        }
    ];
    /** Logging configuration */
    LoggerConfig logger = 7;
    /** Arbitrary metadata, may be passed to result labels and json output */
    map<string, string> metadata = 8;
    /** Plugins configuration */
    repeated Plugin plugins = 9;
}


/**
 * Config contains the complete configuration for a benchmark run.
 */
message Config {
    /**
     * Version of the configuration format e.g. proto files version.
     * This is used for backward compatibility of configs
     * and will be set automatically from binary run if not present.
     */
    string version = 1;
    /** RunConfig contains the complete configuration for a benchmark run. */
    RunConfig run = 2 [(validate.rules).message.required = true];
    /** BenchmarkDescriptor defines a complete benchmark consisting of multiple steps. */
    BenchmarkDescriptor benchmark = 3 [(validate.rules).message.required = true];
}