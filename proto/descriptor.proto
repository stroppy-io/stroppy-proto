syntax = "proto3";

package stroppy;

import "common.proto";
import "gen/validate/validate.proto";

option go_package = "github.com/stroppy-io/stroppy-core/pkg/proto";

/**
 * IndexDescriptor defines the structure of a database index.
 */
message IndexDescriptor {
    /** Name of the index */
    string name = 1 [(validate.rules).string.min_len = 1];
    /** List of column names that are part of this index */
    repeated string columns = 2 [
        (validate.rules).repeated = {
            unique: true,
            items: {message: {required: true}}
        }
    ];
    /** Type of index (e.g., BTREE, HASH, etc.) */
    string type = 3;
    /** Whether this is a unique index */
    bool unique = 4;
    /** Database-specific index properties */
    optional Value.Struct db_specific = 5;
}

/**
 * ColumnDescriptor defines the structure of a database column.
 */
message ColumnDescriptor {
    /** Name of the column */
    string name = 1 [(validate.rules).string.min_len = 1];
    /** SQL data type of the column */
    string sql_type = 2 [(validate.rules).string.min_len = 1];
    /** Whether the column can be NULL */
    bool nullable = 3;
    /** Whether the column is part of the primary key */
    bool primary_key = 4;
    /** Whether the column has a UNIQUE constraint */
    bool unique = 5;
    /** SQL constraint definition for the column */
    string constraint = 6;
}

/**
 * TableDescriptor defines the structure of a database table.
 */
message TableDescriptor {
    /** Name of the table */
    string name = 1 [(validate.rules).string.min_len = 1];
    /** List of indexes defined on this table */
    repeated IndexDescriptor table_indexes = 3 [
        (validate.rules).repeated = {
            items: {message: {required: true}}
        }
    ];
    /** Table-level constraints */
    string constraint = 5;
    /** Database-specific table properties */
    Value.Struct db_specific = 6;
    /** Columns defined in this table */
    repeated ColumnDescriptor columns = 100;
}

/**
 * QueryParamDescriptor defines a parameter that can be used in a query.
 */
message QueryParamDescriptor {
    /** Name of the parameter */
    string name = 1 [(validate.rules).string.min_len = 1];
    /** Regular expression pattern to replace with the parameter value default is "${<param_name>}" */
    string replace_regex = 2;
    /** Rule for generating parameter values */
    Generation.Rule generation_rule = 3 [(validate.rules).message.required = true];
    /** Database-specific parameter properties */
    Value.Struct db_specific = 4;
}

/**
 * QueryDescriptor defines a database query with its parameters and execution count.
 */
message QueryDescriptor {
    /** Name of the query */
    string name = 1 [(validate.rules).string.min_len = 1];
    /** SQL query text */
    string sql = 2 [(validate.rules).string.min_len = 1];
    /** Parameters used in the query */
    repeated QueryParamDescriptor params = 3 [
        (validate.rules).repeated = {
            items: {message: {required: true}}
        }
    ];
    /** Number of times to execute this query */
    uint64 count = 4 [(validate.rules).uint64.gt = 0];
    /** Database-specific query properties */
    Value.Struct db_specific = 5;
}

/**
 * TransactionIsolationLevel defines the isolation level for a database transaction.
 */
enum TxIsolationLevel {
    TX_ISOLATION_LEVEL_UNSPECIFIED = 0;
    TX_ISOLATION_LEVEL_READ_UNCOMMITTED = 1;
    TX_ISOLATION_LEVEL_READ_COMMITTED = 2;
    TX_ISOLATION_LEVEL_REPEATABLE_READ = 3;
    TX_ISOLATION_LEVEL_SERIALIZABLE = 4;
}

/**
 * TransactionDescriptor defines a database transaction with its queries and execution count.
 */
message TransactionDescriptor {
    /** Name of the transaction */
    string name = 1 [(validate.rules).string.min_len = 1];
    /** Transaction isolation level */
    TxIsolationLevel isolation_level = 2;
    /** List of queries to execute in this transaction */
    repeated QueryDescriptor queries = 3 [
        (validate.rules).repeated = {
            min_items: 1,
            items: {message: {required: true}}
        }
    ];
    /** Number of times to execute this transaction */
    uint64 count = 4 [(validate.rules).uint64.gt = 0];
    /** Database-specific transaction properties */
    Value.Struct db_specific = 5;
}

/**
 * StepQueryDescriptor represents a single query or table creation operation
 * that can be part of a benchmark step.
 */
message StepQueryDescriptor {
    oneof type {
        option (validate.required) = true;
        /** Table creation operation */
        TableDescriptor create_table = 1;
        /** Query execution operation */
        QueryDescriptor query = 2;
        /** Transaction execution operation */
        TransactionDescriptor transaction = 4;
    };
    /** Whether to execute this operation asynchronously */
    bool async = 100;
}

/**
 * StepDescriptor represents a logical step in a benchmark.
 */
message StepDescriptor {
    /** Name of the step */
    string name = 1 [(validate.rules).string.min_len = 1];
    /** List of operations to perform in this step */
    repeated StepQueryDescriptor queries = 2 [
        (validate.rules).repeated = {
            min_items: 1,
            items: {message: {required: true}}
        }
    ];
    /** Whether to execute all operations in this step asynchronously */
    bool async = 3;
}

/**
 * BenchmarkDescriptor defines a complete benchmark consisting of multiple steps.
 */
message BenchmarkDescriptor {
    /** Name of the benchmark */
    string name = 1 [(validate.rules).string.min_len = 1];
    /** List of steps to execute in the benchmark */
    repeated StepDescriptor steps = 100 [
        (validate.rules).repeated = {
            min_items: 1,
            items: {message: {required: true}}
        }
    ];
}