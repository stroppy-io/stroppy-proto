syntax = "proto3";

package stroppy;

import "common.proto";
import "config.proto";
import "descriptor.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/stroppy-io/stroppy-core/pkg/proto";


/**
 * UnitBuildContext provides the context needed to build a unit from a StepUnitDescriptor.
 */
message UnitBuildContext {
    StepContext context = 1;
    stroppy.StepUnitDescriptor unit = 2;
}

/**
 * DriverQuery represents a query that can be executed by a database driver.
 */
message DriverQuery {
    string name = 1;
    string request = 2;
    repeated stroppy.Value params = 3;
}

/**
 * DriverTransaction represents a transaction that can be executed by a database driver.
 */
message DriverTransaction {
    repeated DriverQuery queries = 1;
    TxIsolationLevel isolation_level = 2;
}

/**
 * DriverTransactionList is a list of transactions.
 */
message DriverTransactionList {
    repeated DriverTransaction transactions = 1;
}

/**
 * DriverPlugin defines the gRPC service that database driver plugins must implement.
 */
service DriverPlugin {
    /**
     * Initialize is called once before the benchmark starts.
     * Used to initialize resources of DriverPlugin, such as database connections.
    */
    rpc Initialize (stroppy.StepContext) returns (google.protobuf.Empty);
    /**
     * BuildTransactionsFromUnit is called once for each StepUnitDescriptor in a step.
     * Result is a list of transactions with queries with parameters inside.
    */
    rpc BuildTransactionsFromUnit (UnitBuildContext) returns (DriverTransactionList);
    /**
     * BuildTransactionsFromUnitStream is the same as BuildTransactionsFromUnit,
     * but returns a stream of transactions instead of a list.
     * It is useful for drivers that support streaming transactions.
     * Also, with streaming, we can't reduce RAM usage when building and running transactions.
     * The result is a stream of transactions with queries with parameters inside.
    */
    rpc BuildTransactionsFromUnitStream (UnitBuildContext) returns (stream DriverTransaction);
    /**
     * RunTransaction is called once for each built transaction.
     * The driver must implement the transactional context of operations.
     * If the transaction has a single query, the driver may ignore transactional wrapping and run the query directly.
    */
    rpc RunTransaction (DriverTransaction) returns (google.protobuf.Empty);
    /**
     * Teardown is called once after the benchmark ends.
     * Needs to clean up resources.
    */
    rpc Teardown (google.protobuf.Empty) returns (google.protobuf.Empty);
}

message OnStepQueryBuildEvent {
    /**
     * Context contains the information needed to build a transaction from a unit.
    */
    UnitBuildContext context = 1;
    /**
     * The list of transactions was built from the StepUnitDescriptor
    */
    optional DriverTransactionList transaction_list = 2;
    /**
     * Error is an optional error message
    */
    optional string error = 3;
}

message OnStepQueryRunEvent {
    /**
     * Context contains the step context and the step query descriptor
    */
    StepContext context = 1;
    /**
     * Query is the query to run
    */
    DriverQuery query = 2;
    /**
     * Error is an optional error message
    */
    optional string error = 3;
}

/**
 * SidecarPlugin defines the gRPC service that sidecar plugins must implement.
*/
service SidecarPlugin {
    /**
     * Initialize is called once before the benchmark starts.
     * Used to initialize resources of SidecarPlugin.
    */
    rpc Initialize (stroppy.StepContext) returns (google.protobuf.Empty);
    /**
     * OnStepStart is called once before each step starts.
    */
    rpc OnStepStart (stroppy.StepContext) returns (google.protobuf.Empty);
    /**
     * OnStepQuery is called after driver BuildQueries is called.
    */
    rpc OnStepQueryBuild (OnStepQueryBuildEvent) returns (google.protobuf.Empty);
    /**
     * OnStepQueryRun is called after driver RunQuery is called.
    */
    rpc OnStepQueryRun (OnStepQueryRunEvent) returns (google.protobuf.Empty);
    /**
     * OnStepEnd is called once after each step ends.
    */
    rpc OnStepEnd (stroppy.StepContext) returns (google.protobuf.Empty);
    /**
     * Teardown is called once after the benchmark ends.
     * Used to clean up resources.
    */
    rpc Teardown (google.protobuf.Empty) returns (google.protobuf.Empty);
}