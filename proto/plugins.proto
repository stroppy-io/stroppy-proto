syntax = "proto3";

package stroppy;

import "common.proto";
import "config.proto";
import "descriptor.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/stroppy-io/stroppy-core/pkg/proto";


/**
 * BuildQueriesContext provides the context needed to build database queries.
 */
message BuildQueriesContext {
    StepContext context = 1;
    stroppy.StepQueryDescriptor query = 2;
}

/**
 * DriverQuery represents a query that can be executed by a database driver.
 */
message DriverQuery {
    string name = 1;
    string request = 2;
    repeated stroppy.Value params = 3;
}

/**
 * DriverQueriesList is a collection of DriverQuery messages.
 */
message DriverQueriesList {
    repeated DriverQuery queries = 1;
}

/**
 * DriverPlugin defines the gRPC service that database driver plugins must implement.
 */
service DriverPlugin {
    /**
     * Initialize is called once before the benchmark starts.
     * Used to initialize resources of DriverPlugin, such as database connections.
    */
    rpc Initialize (stroppy.StepContext) returns (google.protobuf.Empty);
    /**
     * BuildQueries is called once for each queries set in a step.
     * Used to build a query set from the descriptor of a step.
     * Result is a list of queries with parameters generated by core-value-generator.
    */
    rpc BuildQueries (BuildQueriesContext) returns (DriverQueriesList);
    /**
     * RunQuery is called once for each built query.
    */
    rpc RunQuery (DriverQuery) returns (google.protobuf.Empty);
    /**
     * Teardown is called once after the benchmark ends.
     * Needs to clean up resources.
    */
    rpc Teardown (google.protobuf.Empty) returns (google.protobuf.Empty);
}

message OnStepQueryBuildEvent {
    /**
     * Context contains the step context and the step query descriptor
    */
    BuildQueriesContext context = 1;
    /**
     * Queries is a list of queries to build
    */
    optional DriverQueriesList queries = 2;
    /**
     * Error is an optional error message
    */
    optional string error = 3;
}

message OnStepQueryRunEvent {
    /**
     * Context contains the step context and the step query descriptor
    */
    StepContext context = 1;
    /**
     * Query is the query to run
    */
    DriverQuery query = 2;
    /**
     * Error is an optional error message
    */
    optional string error = 3;
}

/**
 * SidecarPlugin defines the gRPC service that sidecar plugins must implement.
*/
service SidecarPlugin {
    /**
     * Initialize is called once before the benchmark starts.
     * Used to initialize resources of SidecarPlugin.
    */
    rpc Initialize (stroppy.StepContext) returns (google.protobuf.Empty);
    /**
     * OnStepStart is called once before each step starts.
    */
    rpc OnStepStart (stroppy.StepContext) returns (google.protobuf.Empty);
    /**
     * OnStepQuery is called after driver BuildQueries is called.
    */
    rpc OnStepQueryBuild (OnStepQueryBuildEvent) returns (google.protobuf.Empty);
    /**
     * OnStepQueryRun is called after driver RunQuery is called.
    */
    rpc OnStepQueryRun (OnStepQueryRunEvent) returns (google.protobuf.Empty);
    /**
     * OnStepEnd is called once after each step ends.
    */
    rpc OnStepEnd (stroppy.StepContext) returns (google.protobuf.Empty);
    /**
     * Teardown is called once after the benchmark ends.
     * Used to clean up resources.
    */
    rpc Teardown (stroppy.StepContext) returns (google.protobuf.Empty);
}